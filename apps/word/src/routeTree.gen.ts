/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as IndexImport } from "./routes/index";
import { Route as LayoutSiteIdentifierIndexImport } from "./routes/_layout/$siteIdentifier/index";

// Create Virtual Routes

const LayoutLazyImport = createFileRoute("/_layout")();

// Create/Update Routes

const LayoutLazyRoute = LayoutLazyImport.update({
  id: "/_layout",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/_layout.lazy").then((d) => d.Route));

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const LayoutSiteIdentifierIndexRoute = LayoutSiteIdentifierIndexImport.update({
  id: "/$siteIdentifier/",
  path: "/$siteIdentifier/",
  getParentRoute: () => LayoutLazyRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/_layout": {
      id: "/_layout";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof LayoutLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/_layout/$siteIdentifier/": {
      id: "/_layout/$siteIdentifier/";
      path: "/$siteIdentifier";
      fullPath: "/$siteIdentifier";
      preLoaderRoute: typeof LayoutSiteIdentifierIndexImport;
      parentRoute: typeof LayoutLazyImport;
    };
  }
}

// Create and export the route tree

interface LayoutLazyRouteChildren {
  LayoutSiteIdentifierIndexRoute: typeof LayoutSiteIdentifierIndexRoute;
}

const LayoutLazyRouteChildren: LayoutLazyRouteChildren = {
  LayoutSiteIdentifierIndexRoute: LayoutSiteIdentifierIndexRoute,
};

const LayoutLazyRouteWithChildren = LayoutLazyRoute._addFileChildren(
  LayoutLazyRouteChildren,
);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "": typeof LayoutLazyRouteWithChildren;
  "/$siteIdentifier": typeof LayoutSiteIdentifierIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "": typeof LayoutLazyRouteWithChildren;
  "/$siteIdentifier": typeof LayoutSiteIdentifierIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/_layout": typeof LayoutLazyRouteWithChildren;
  "/_layout/$siteIdentifier/": typeof LayoutSiteIdentifierIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "" | "/$siteIdentifier";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "" | "/$siteIdentifier";
  id: "__root__" | "/" | "/_layout" | "/_layout/$siteIdentifier/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  LayoutLazyRoute: typeof LayoutLazyRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutLazyRoute: LayoutLazyRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout.lazy.tsx",
      "children": [
        "/_layout/$siteIdentifier/"
      ]
    },
    "/_layout/$siteIdentifier/": {
      "filePath": "_layout/$siteIdentifier/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
